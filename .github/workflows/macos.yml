name: MacOS Build

on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-latest
    if: ${{ startsWith(github.ref, 'refs/tags') || !contains(github.event.head_commit.message, '[skip ci]') }}
    env:
      MACOSX_DEPLOYMENT_TARGET: 11

    steps:
    - uses: actions/checkout@v2
    
    # Download and install Python instead of using the setup_python
    # as the python interpreters in the Github machines
    # were compiled in 10.14, which means that the wheels
    # are incompatible with older MacOS versions
    - name: Download and install Python
      run: |
        # curl \
        #   https://www.python.org/ftp/python/3.8.9/python-3.8.9-macosx10.9.pkg \
        #   --output python_installer.pkg
        # sudo installer -pkg python_installer.pkg -target /

        # curl \
        #   https://www.python.org/ftp/python/3.9.9/python-3.9.9-macosx10.9.pkg \
        #   --output python_installer.pkg
        # sudo installer -pkg python_installer.pkg -target /

        # curl \
        #   https://www.python.org/ftp/python/3.10.9/python-3.10.9-macos11.pkg \
        #   --output python_installer.pkg
        # sudo installer -pkg python_installer.pkg -target /

        # curl \
        #   https://www.python.org/ftp/python/3.11.5/python-3.11.5-macos11.pkg \
        #   --output python_installer.pkg
        # sudo installer -pkg python_installer.pkg -target /

        brew install python@3.8
        brew install python@3.9
        brew install python@3.10
        brew install python@3.11

    - name: Checkout submodules
      run: | 
        git submodule init
        git submodule update

    - name: Build zlib
      run: |
         git clone https://github.com/madler/zlib.git
         mkdir zlib-build
         cd zlib-build
         cmake ../zlib -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../zlib-install
         make install
         cd ..

    - name: Build ITK
      run: |
        mkdir ITK-build
        cd ITK-build
        cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../ITK-install \
            ../ITK
        make install
        cd ..

    - name: Build charm-gems
      run: |
        # .github/workflows/macos_build.sh /Library/Frameworks/Python.framework/Versions/3.8/bin/python3
        # .github/workflows/macos_build.sh /Library/Frameworks/Python.framework/Versions/3.9/bin/python3
        # .github/workflows/macos_build.sh /Library/Frameworks/Python.framework/Versions/3.10/bin/python3
        # .github/workflows/macos_build.sh /Library/Frameworks/Python.framework/Versions/3.11/bin/python3
        .github/workflows/macos_build.sh /usr/local/bin/python3.8
        .github/workflows/macos_build.sh /usr/local/bin/python3.9
        .github/workflows/macos_build.sh /usr/local/bin/python3.10
        .github/workflows/macos_build.sh /usr/local/bin/python3.11
      env:
        ITK_DIR: ITK-install
        ZLIB_INCLUDE_DIR: zlib-install/include
        ZLIB_LIBRARY: zlib-install/lib/libz.a

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: macos-wheels
        path: dist/*.whl

    - name: Upload to PyPI
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
      run: |
        $PYTHON -m pip install twine
        $PYTHON -m twine upload dist/*.whl -u __token__ -p "$PASSWORD"
      env:
        PASSWORD: ${{ secrets.PYPI_TOKEN }}
        PYTHON: /usr/local/bin/python3.8
